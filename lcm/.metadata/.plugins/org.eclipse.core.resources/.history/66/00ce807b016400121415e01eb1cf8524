#include "opencv/cv.h"
#include "opencv/highgui.h"
#include "opencv/cvaux.h"
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <math.h>
#include <getopt.h>
#include <lcm/lcm.h>
#include <lcmtypes/bot_core.h>

using namespace std;
using namespace cv;

bool gotOne = false;
bool gotTwo = false;

typedef struct _Comp {
	lcm_t* subscribe_lcm;
	lcm_t* publish_lcm;
	IplImage* iOne;
	IplImage* iTwo;
}Comp;

int msgHeight = 0;
int msgWidth = 0;


void on_image_frame1(const lcm_recv_buf_t *rbuf, const char *channel,const bot_core_image_t *msg, void *user_data) {
	Comp *self = (Comp*) user_data;


	Mat img_lcm = Mat::zeros(msg->height, msg->width, CV_8UC3); // h,w
	img_lcm.data = msg->data;


	self->iOne = new IplImage(img_lcm);
	gotOne = true;

	msgHeight = msg->height;
	msgWidth = msg->width;
	
	printf("one!\n");

}

void on_image_frame2(const lcm_recv_buf_t *rbuf, const char *channel, const bot_core_image_t *msg, void *user_data) {
	Comp *self = (Comp*) user_data;


	Mat img_lcm = Mat::zeros(msg->height, msg->width, CV_8UC3); // h,w
	img_lcm.data = msg->data;


	self->iTwo = new IplImage(img_lcm);
	gotTwo = true;

	printf("two!\n");

}

int main(int argc, char** argv) {


   char* lcmChannel1 = argv[1];
   char* lcmChannel2 = argv[2];


	Comp *self = (Comp*) calloc(1, sizeof(Comp));

	self->publish_lcm = lcm_create(NULL);
	self->subscribe_lcm = lcm_create(NULL);

	bot_core_image_t_subscription_t * sub1 = bot_core_image_t_subscribe(self->subscribe_lcm, lcmChannel1, on_image_frame1, self);
	bot_core_image_t_subscription_t * sub2 = bot_core_image_t_subscribe(self->subscribe_lcm, lcmChannel2, on_image_frame2, self);

	cvNamedWindow("testing", CV_WINDOW_AUTOSIZE);

	while(1){
	    lcm_handle(self->subscribe_lcm);

	if (gotOne&&gotTwo){
		printf("running stitch\n");
		IplImage* stitch = cvCreateImage(cvSize(msgWidth*2, msgHeight), IPL_DEPTH_8U, 3);
		
		cvSetImageROI(stitch, cvRect(0,0, msgWidth, msgHeight));
		//IplImage* iOne = new IplImage(self->iOne);
		cvCopy(self->iOne->imageData, stitch->imageData, 0);

		cvSetImageROI(stitch, cvRect(msgWidth,0, msgWidth, msgHeight));
		//IplImage* iTwo = new IplImage(self->iTwo);
		cvCopy(self->iTwo, stitch, 0);

		cvResetImageROI(stitch);


		cvShowImage("testing", stitch);

		cvWaitKey(33);

		//cvReleaseImage(&iOne);
		//cvReleaseImage(&iTwo);
		//cvReleaseImage(&stitch);
	}

}
}

