/*
 * lidarFilter.cpp
 *
 *  Created on: Jan 22, 2013
 *      Author: blicycle
 */


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <math.h>
#include "opencv/cv.h"
#include "opencv/highgui.h"
#include "lcm/lcm.h"
#include "lcmtypes/bot_core.h"
#include <ctime>




using namespace std;
using namespace cv;
typedef struct _Comp {
  lcm_t* subscribe_lcm;
  lcm_t* publish_lcm;
}Comp;



// Print help information
void print_help() {
    printf("** Invalid syntax!\n"
    		"<channelIn> <channelOut>\n");
}


int main( int argc, char** argv ) {

	// Print a welcome message
	printf("lidar Filter\n");

	// Based on the command line arguments to this executable, capture either from
	// a data file or from a live video stream
	if (argc != 3) {
		print_help();
		exit(1);
	}

	char* lcmChannel1 = argv[1];
	char* lcmChannel2 = argv[2];

	IplImage* image = NULL;

	//Set Up LCM

	Comp *self = (Comp*) calloc (1, sizeof (Comp));
	  self->publish_lcm=lcm_create(NULL);
	  self->subscribe_lcm = lcm_create(NULL);


	while(1) {
		IplImage* frame;
		if (!image) {
			frame = cvQueryFrame(capture);
			if( !frame ) break;
		} else {
			frame = image;
		}

		bot_core_image_metadata_t fake;
		fake.n = 1;
		bot_image.width = frame->width;
		bot_image.height = frame->height;
		bot_image.row_stride = frame->nChannels*frame->width;
		bot_image.pixelformat = BOT_CORE_IMAGE_T_PIXEL_FORMAT_RGB;
		bot_image.data = (uchar*)frame->imageData;
		bot_image.utime = (long int) time(0);
		bot_image.size = frame->imageSize;
		bot_image.nmetadata = 0;
		bot_image.metadata = &fake;


		// Send over the data!
		bot_core_image_t_publish(self->publish_lcm,lcmChannel1, &bot_image);

			char c = cvWaitKey(3);
	}

	cvReleaseImage(&image);

}
